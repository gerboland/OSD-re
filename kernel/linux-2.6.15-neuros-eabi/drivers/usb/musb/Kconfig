#
# USB Dual Role (OTG-ready) Controller Drivers
# for silicon based on Mentor Graphics INVENTRA designs
#

comment "Enable Host or Gadget support to see Inventra options"
	depends on !USB && USB_GADGET=n

# (M)HDRC = (Multipoint) Highspeed Dual-Role Controller
config USB_MUSB_HDRC
	depends on USB || USB_GADGET
	tristate 'Inventra USB Highspeed Dual Role Controller Support'
	help
	  Say Y here if your system has a dual role high speed USB
	  controller based on the Mentor Graphics silicon IP.  Then
	  then configure options to match your silicon and the board
	  it's being used with, including the USB peripheral role,
	  or the USB host role, or both.

	  If you do not know what this is, please say N.

	  To compile this driver as a module, choose M here; the
	  module will be called "musb_hdrc".



choice
	prompt "Role"
	depends on USB_MUSB_HDRC 
	help
	  Dual-Role devices can support both host and peripheral roles,
	  as well as a the special "OTG Device" role which can switch
	  between both roles as needed.

# use USB_MUSB_HDRC_HCD not USB_MUSB_HOST to #ifdef host side support;
# OTG needs both roles, not just USB_MUSB_HOST.
config USB_MUSB_HOST
	depends on USB
	bool "USB Host"
	help
	  Say Y here if your system supports the USB host role.
	  If it has a USB "A" (rectangular), "Mini-A" (uncommon),
	  or "Mini-AB" connector, it supports the host role.
	  (With a "Mini-AB" connector, you should enable USB OTG.)

# use USB_GADGET_MUSB_HDRC not USB_MUSB_PERIPHERAL to #ifdef peripheral
# side support ... OTG needs both roles
config USB_MUSB_PERIPHERAL
	depends on USB_GADGET
	bool "USB Peripheral (gadget stack)"
	select USB_GADGET_MUSB_HDRC
	help
	  Say Y here if your system supports the USB peripheral role.
	  If it has a USB "B" (squarish), "Mini-B", or "Mini-AB"
	  connector, it supports the peripheral role.
	  (With a "Mini-AB" connector, you should enable USB OTG.)

config USB_MUSB_OTG
	depends on USB && USB_GADGET && EXPERIMENTAL && n
	bool "USB OTG (On The Go) Device"
	select USB_GADGET_MUSB_HDRC
	select USB_OTG
	help
	   The most notable feature of USB OTG is support for a
	   "Dual-Role" device, which can act as either a device
	   or a host.  The initial role choice can be changed
	   later, when two dual-role devices talk to each other.

	   Select this only if your system has a Mini-AB connector.

	   To implement your OTG Targeted Peripherals List (TPL), enable
	   USB_OTG_WHITELIST and update "drivers/usb/core/otg_whitelist.h"
	   to match your requirements.

endchoice

# enable peripheral support (including with OTG)
config USB_GADGET_MUSB_HDRC
	bool
	depends on USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)
#	default y
#	select USB_GADGET_DUALSPEED
#	select USB_GADGET_SELECTED

# enables host support (including with OTG)
config USB_MUSB_HDRC_HCD
	bool
	depends on USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG)
	select USB_OTG if USB_GADGET_MUSB_HDRC
	default y



# FIXME code is still not wholly consistent about how it chooses I/O ...

# REVISIT enable DMA later, after testing with both roles

config USB_INVENTRA_FIFO
	#bool 'Use PIO instead of DMA'
	bool
	depends on USB_MUSB_HDRC
	default y
	help
	  All data is copied between memory and FIFO by the CPU.
	  DMA controllers (from Mentor or otherwise) are ignored.

config USB_INVENTRA_DMA
	bool
	depends on USB_MUSB_HDRC && !USB_INVENTRA_FIFO
	depends on ARCH_OMAP
	default y
	help
	  Enable DMA transfers using Mentor's engine.

config USB_TI_CPPI_DMA
	bool
	depends on USB_MUSB_HDRC && !USB_INVENTRA_FIFO
	depends on ARCH_DAVINCI
	default y
	help
	  Enable DMA transfers when TI CPPI DMA is available.

config USB_INVENTRA_STATIC_CONFIG
	bool
	depends on USB_MUSB_HDRC
	default y
	help
	  Use a static <asm/arch/hdrc_cnf.h> file to describe how the
	  controller is configured (endpoints, mechanisms, etc).

config USB_INVENTRA_HCD_POLLING
	depends on USB_MUSB_HDRC && n
	bool 'Use polling driver (debug only)'
	default false
	help
	  Enable polling mode (events won't be triggered by IRQs);
	  may be useful for debugging.

	  If you do not know what this is, please say N.	  

config	USB_INVENTRA_HCD_LOGGING
	depends on USB_MUSB_HDRC
	int  'Logging Level (0 - none / 3 - annoying)'
	default 0 
	help
	  Set the logging level. 0 disables the debugging altogether,
	  although when USB_DEBUG is set the value is at least 1.
