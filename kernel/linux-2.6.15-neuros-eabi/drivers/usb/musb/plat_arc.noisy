/******************************************************************
 * Copyright 2005 Mentor Graphics Corporation
 *
 * This file is part of the Inventra Controller Driver for Linux.
 * 
 * The Inventra Controller Driver for Linux is free software; you 
 * can redistribute it and/or modify it under the terms of the GNU 
 * General Public License version 2 as published by the Free Software 
 * Foundation.
 * 
 * The Inventra Controller Driver for Linux is distributed in 
 * the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with The Inventra Controller Driver for Linux ; if not, 
 * write to the Free Software Foundation, Inc., 59 Temple Place, 
 * Suite 330, Boston, MA  02111-1307  USA
 * 
 * ANY DOWNLOAD, USE, REPRODUCTION, MODIFICATION OR DISTRIBUTION 
 * OF THIS DRIVER INDICATES YOUR COMPLETE AND UNCONDITIONAL ACCEPTANCE 
 * OF THOSE TERMS.THIS DRIVER IS PROVIDED "AS IS" AND MENTOR GRAPHICS 
 * MAKES NO WARRANTIES, EXPRESS OR IMPLIED, RELATED TO THIS DRIVER.  
 * MENTOR GRAPHICS SPECIFICALLY DISCLAIMS ALL IMPLIED WARRANTIES 
 * OF MERCHANTABILITY; FITNESS FOR A PARTICULAR PURPOSE AND 
 * NON-INFRINGEMENT.  MENTOR GRAPHICS DOES NOT PROVIDE SUPPORT 
 * SERVICES OR UPDATES FOR THIS DRIVER, EVEN IF YOU ARE A MENTOR 
 * GRAPHICS SUPPORT CUSTOMER. 
 ******************************************************************/

/*
 * Linux-specific architecture definitions
 * $Revision: 1.1 $
 */

#ifndef __MUSB_LINUX_PLATFORM_ARCH_H__
#define __MUSB_LINUX_PLATFORM_ARCH_H__

//#define MGC_Read8(_pBase, _offset) *(volatile uint8_t*)(_pBase + _offset)
//#define MGC_Read16(_pBase, _offset) *(volatile uint16_t*)(_pBase + _offset)
//#define MGC_Read32(_pBase, _offset) *(volatile uint32_t*)(_pBase + _offset)

extern int dumpit;

#define MGC_Read8(_pBase, _offset) ({ u8 _data = *(volatile uint8_t*)(_pBase + _offset);\
	if(dumpit)\
	printk(KERN_DEBUG "r%03x=%02x/", 0xfff&(((u32)_pBase)+((u32)_offset)),(u8)_data);\
	_data; })

#define MGC_Read16(_pBase, _offset) ({ u16 _data = *(volatile uint16_t*)(_pBase + _offset);\
	if(dumpit)\
	printk(KERN_DEBUG "r%03x=%04x/", 0xfff&(((u32)_pBase)+((u32)_offset)),(u16)_data);\
	_data; })
#define MGC_Read32(_pBase, _offset) ({ u32 _data = *(volatile uint32_t*)(_pBase + _offset);\
	if(dumpit)\
	printk(KERN_DEBUG "r%03x=%08x/", 0xfff&(((u32)_pBase)+((u32)_offset)),(u32)_data);\
	_data; })

/*
#define MGC_Write8(_pBase, _offset, _data) MGC_Read8(_pBase, _offset) = _data
#define MGC_Write16(_pBase, _offset, _data) MGC_Read16(_pBase, _offset) = _data
#define MGC_Write32(_pBase, _offset, _data) MGC_Read32(_pBase, _offset) = _data
*/

#undef MGC_Write8
#define MGC_Write8(_pBase, _offset, _data) do { \
	if(dumpit)\
	printk(KERN_DEBUG "w%03x=%02x/", 0xfff&(((u32)_pBase)+((u32)_offset)),(u8)_data);\
  /*  DBG(4, "Write8(%p, %x, %02x)\n", _pBase, _offset, _data); */\
    *(volatile uint8_t*)(_pBase + _offset) = _data; \
} while(0)

#undef MGC_Write16
#define MGC_Write16(_pBase, _offset, _data) do { \
	if(dumpit)\
	printk(KERN_DEBUG "w%03x=%04x/", 0xfff&(((u32)_pBase)+((u32)_offset)),(u16)_data);\
  /*  DBG(4, "Write16(%p, %x, %04x)\n", _pBase, _offset, _data); */\
    *(volatile uint16_t*)(_pBase + _offset) = _data; \
} while(0)

#undef MGC_Write32
#define MGC_Write32(_pBase, _offset, _data) do { \
	if(dumpit)\
	printk(KERN_DEBUG "w%03x=%08x/", 0xfff&(((u32)_pBase)+((u32)_offset)),(u32)_data);\
   /* DBG(4, "Write32(%p, %x, %08x)\n", _pBase, _offset, _data); */\
    *(volatile uint32_t*)(_pBase + _offset) = _data; \
} while(0)


#endif	/* multiple inclusion protection */
